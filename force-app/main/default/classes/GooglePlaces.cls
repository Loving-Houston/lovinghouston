public class GooglePlaces {

    @AuraEnabled
 	public static List<DataTableWrapper> searchPlace (Id account, Decimal longitude, Decimal latitude, Integer radius, String type, String key){

         // Validation to check if type is church. In the future it would be nice to add functionality to take in different types like School.
        if (GooglePlacesUtility.validateInputs(account, longitude, latitude, radius, type).equals('invalid')) {
            return null;
        }
        
        HttpResponse response = GooglePlacesUtility.createTextSearchCall(longitude, latitude, radius, key, type);
        
        // If the request is successful, parse the JSON response. Status code is always 200 for Google Maps API
        if (response.getStatusCode() == 200) {
            
            // Deserialize the JSON string into collections of primitive data types.
            Map<Integer, Map<String,Object>> bulkData = GooglePlacesUtility.processResults(response); 
            // Create "raw" churches that will be checked for duplicates.           
            List<Account> rawChurches = GooglePlacesDML.createRawChurches(bulkData);
            Map<String, List<Account>> processedChurches = GooglePlacesDupeChecker.checkAccountDupes(rawchurches);
            List<Account> churchesNeedCSP = new List<Account>();

            if (processedChurches == null) {
                // If no dupes, all churches will need CSPs
                System.debug('Found no Duplicates');
                processedChurches.put('Non-dupes', rawChurches);
            } else {
                // The matched records will go through a check to see if CSPs exist for them
                System.debug('Found duplicates');
                churchesNeedCSP = GooglePlacesDupeChecker.checkCSPDupes(processedChurches.get('Dupes'), account);
            }
            
            // Raw churches will be inserted
            churchesNeedCSP.addAll(GooglePlacesDML.createProcessedChurches(processedChurches.get('Non-dupes')));
            List<Church_School_Partnership__c> csps = GooglePlacesDML.createPotentialCSPs(churchesNeedCSP, account);
            return wrapCSPs(csps);
        }
        return null;
    }

    // Translate CSP data into readable wrappers for LWC component. This allows URLs to be sent in name format
    public static List<DataTableWrapper> wrapCSPs (List<Church_School_Partnership__c> csps) {
        List<DataTableWrapper> wrappers = new List<DataTableWrapper>();
        Set<Id> accountIds = new Set<Id>();
        Map<Id, Account> accounts = new Map<Id, Account>();
        
        for (Church_School_Partnership__c csp : csps) {
            accountIds.add(csp.School_Account__c);
            accountIds.add(csp.Church_Account__c);
        }

        List<Account> schools = [SELECT Id, Name FROM Account WHERE Type = 'School' AND Id IN :accountIds];
        List<Account> churches = [SELECT Id, Name, Website, Phone, Google_Maps_Listing__c FROM Account WHERE Type = 'Church' AND Id IN :accountIds];
        churches.addAll(schools);

        for (Account account : churches) {
            accounts.put(account.Id, account);
        }

        for (Church_School_Partnership__c csp : csps) {
            DataTableWrapper wrapper = new DataTableWrapper();
            wrapper.cspUrl = '/' + csp.Id;
            wrapper.cspName = csp.Name;
            wrapper.schoolUrl = '/' + csp.School_Account__c;
            wrapper.schoolName = csp.School_Name__c;
            wrapper.churchUrl = '/' + csp.Church_Account__c;
            wrapper.churchName = csp.Church_Name__c;
            wrapper.status = csp.Status__c;
            wrapper.website = accounts.get(csp.Church_Account__c).Website;
            wrapper.googleMapsListing = accounts.get(csp.Church_Account__c).Google_Maps_Listing__c;
            wrapper.phone = accounts.get(csp.Church_Account__c).Phone;
            wrappers.add(wrapper);
        }

        return wrappers;
    }

    // Wrapper class for sending data back to LWC component
    private class DataTableWrapper {
        @AuraEnabled
        public String cspUrl {get; set;}
        @AuraEnabled
        public String schoolUrl {get; set;}
        @AuraEnabled
        public String churchUrl {get; set;}
        @AuraEnabled
        public String status {get; set;}
        @AuraEnabled
        public String cspName {get; set;}
        @AuraEnabled
        public String schoolName {get; set;}
        @AuraEnabled
        public String churchName {get; set;}
        @AuraEnabled
        public String website {get; set;}
        @AuraEnabled
        public String googleMapsListing {get; set;}
        @AuraEnabled
        public String phone {get; set;}
    }
}